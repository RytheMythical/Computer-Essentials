// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RobloxQuickType;
//
//    var qserf = Qserf.FromJson(jsonString);

namespace RobloxQuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Qserf
    {
        [JsonProperty("previousPageCursor")]
        public object PreviousPageCursor { get; set; }

        [JsonProperty("nextPageCursor")]
        public object NextPageCursor { get; set; }

        [JsonProperty("data")]
        public Datum[] Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("maxPlayers")]
        public long MaxPlayers { get; set; }

        [JsonProperty("playing")]
        public long Playing { get; set; }

        [JsonProperty("fps")]
        public double Fps { get; set; }

        [JsonProperty("ping")]
        public long Ping { get; set; }
    }

    public partial class Qserf
    {
        public static Qserf FromJson(string json) => JsonConvert.DeserializeObject<Qserf>(json, RobloxQuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Qserf self) => JsonConvert.SerializeObject(self, RobloxQuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}