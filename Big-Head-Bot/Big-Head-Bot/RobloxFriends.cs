// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RobloxFriendsAPI;
//
//    var robloxFriends = RobloxFriends.FromJson(jsonString);

namespace RobloxFriendsAPI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using Microsoft.Azure.Mobile.Server;

    public partial class RobloxFriends : EntityData
    {
        [JsonProperty("data")]
        public Datum[] Data { get; set; }
    }

    public partial class Datum : EntityData
    {
        [JsonProperty("isOnline")]
        public bool IsOnline { get; set; }

        [JsonProperty("isDeleted")]
        public bool IsDeleted { get; set; }

        [JsonProperty("description")]
        public object Description { get; set; }

        [JsonProperty("created")]
        public DateTimeOffset Created { get; set; }

        [JsonProperty("isBanned")]
        public bool IsBanned { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }
    }

    public partial class RobloxFriends : EntityData
    {
        public static RobloxFriends FromJson(string json) => JsonConvert.DeserializeObject<RobloxFriends>(json, RobloxFriendsAPI.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RobloxFriends self) => JsonConvert.SerializeObject(self, RobloxFriendsAPI.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
