// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OntarioCOVIDAPI;
//
//    var ontarioCovid = OntarioCovid.FromJson(jsonString);

namespace OntarioCOVIDAPI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OntarioCovid
    {
        [JsonProperty("OntarioCasesToday")]
        public string OntarioCasesToday { get; set; }

        [JsonProperty("OntarioTotalDeaths")]
        public string OntarioTotalDeaths { get; set; }

        [JsonProperty("OntarioPendingTests")]
        public string OntarioPendingTests { get; set; }

        [JsonProperty("OntarioYesterdayTest")]
        public string OntarioYesterdayTest { get; set; }

        [JsonProperty("OntarioTotalCases")]
        public string OntarioTotalCases { get; set; }

        [JsonProperty("OntarioRecovered")]
        public string OntarioRecovered { get; set; }

        [JsonProperty("OntarioReportingErrorNews")]
        public string OntarioReportingErrorNews { get; set; }

        [JsonProperty("OntarioHospitalErrorNews")]
        public string OntarioHospitalErrorNews { get; set; }

        [JsonProperty("OntarioEstimateCasesTomorrow")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OntarioEstimateCasesTomorrow { get; set; }

        [JsonProperty("OntarioDeathError")]
        public string OntarioDeathError { get; set; }

        [JsonProperty("OntarioDeaths")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OntarioDeaths { get; set; }

        [JsonProperty("OntarioB117Cases")]
        public string OntarioB117Cases { get; set; }

        [JsonProperty("OntarioB1351Cases")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OntarioB1351Cases { get; set; }

        [JsonProperty("OntarioP1Cases")]
        public string OntarioP1Cases { get; set; }

        [JsonProperty("OntarioSevenDayAverage")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OntarioSevenDayAverage { get; set; }

        [JsonProperty("OntarioPositiveRate")]
        public double OntarioPositiveRate { get; set; }

        [JsonProperty("LTCInOutbreak")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LtcInOutbreak { get; set; }

        [JsonProperty("LTCResolved")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LtcResolved { get; set; }

        [JsonProperty("LTCResidentCases")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LtcResidentCases { get; set; }

        [JsonProperty("LTCStaffCases")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LtcStaffCases { get; set; }

        [JsonProperty("LTCResidentDeaths")]
        public string LtcResidentDeaths { get; set; }

        [JsonProperty("LTCStaffDeaths")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LtcStaffDeaths { get; set; }

        [JsonProperty("LTCHomesInOutbreak")]
        public string[] LtcHomesInOutbreak { get; set; }

        [JsonProperty("LTCHomesNoLongerInOutbreak")]
        public string[] LtcHomesNoLongerInOutbreak { get; set; }

        [JsonProperty("OntarioRecordCases")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OntarioRecordCases { get; set; }

        [JsonProperty("OntarioNewRecoveries")]
        public string OntarioNewRecoveries { get; set; }

        [JsonProperty("LTCTotalCases")]
        public string LtcTotalCases { get; set; }

        [JsonProperty("LTCOutbreakNoCases")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LtcOutbreakNoCases { get; set; }
    }

    public partial class OntarioCovid
    {
        public static OntarioCovid FromJson(string json) => JsonConvert.DeserializeObject<OntarioCovid>(json, OntarioCOVIDAPI.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OntarioCovid self) => JsonConvert.SerializeObject(self, OntarioCOVIDAPI.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
