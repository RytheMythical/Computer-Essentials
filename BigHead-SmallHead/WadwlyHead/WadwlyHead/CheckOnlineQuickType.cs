// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OnlineStatusAPI;
//
//    var onlineStatus = OnlineStatus.FromJson(jsonString);

namespace OnlineStatusAPI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OnlineStatus
    {
        [JsonProperty("GameId")]
        public object GameId { get; set; }

        [JsonProperty("IsOnline")]
        public bool IsOnline { get; set; }

        [JsonProperty("LastLocation")]
        public string LastLocation { get; set; }

        [JsonProperty("LastOnline")]
        public DateTimeOffset LastOnline { get; set; }

        [JsonProperty("LocationType")]
        public object LocationType { get; set; }

        [JsonProperty("PlaceId")]
        public object PlaceId { get; set; }

        [JsonProperty("VisitorId")]
        public long VisitorId { get; set; }

        [JsonProperty("PresenceType")]
        public long PresenceType { get; set; }

        [JsonProperty("UniverseId")]
        public object UniverseId { get; set; }
    }

    public partial class OnlineStatus
    {
        public static OnlineStatus FromJson(string json) => JsonConvert.DeserializeObject<OnlineStatus>(json, OnlineStatusAPI.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OnlineStatus self) => JsonConvert.SerializeObject(self, OnlineStatusAPI.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}