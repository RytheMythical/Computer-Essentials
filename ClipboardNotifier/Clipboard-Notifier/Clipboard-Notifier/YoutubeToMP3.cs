// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using YoutubeMP3API;
//
//    var youtubeMp3 = YoutubeMp3.FromJson(jsonString);

namespace YoutubeMP3API
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Microsoft.Azure.Mobile.Server;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class YoutubeMp3 : EntityData
    {
        [JsonProperty("vidID")]
        public string VidId { get; set; }

        [JsonProperty("vidTitle")]
        public string VidTitle { get; set; }

        [JsonProperty("vidThumb")]
        public Uri VidThumb { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("vidInfo")]
        public Dictionary<string, VidInfo> VidInfo { get; set; }
    }

    public partial class VidInfo : EntityData
    {
        [JsonProperty("dloadUrl")]
        public Uri DloadUrl { get; set; }

        [JsonProperty("bitrate")]
        public long Bitrate { get; set; }

        [JsonProperty("mp3size")]
        public string Mp3Size { get; set; }
    }

    public partial class YoutubeMp3 : EntityData
    {
        public static YoutubeMp3 FromJson(string json) => JsonConvert.DeserializeObject<YoutubeMp3>(json, YoutubeMP3API.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this YoutubeMp3 self) => JsonConvert.SerializeObject(self, YoutubeMP3API.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}